#
# K2HDKC DBaaS based on Trove
#
# Copyright 2020 Yahoo Japan Corporation
#
# K2HDKC DBaaS is a Database as a Service compatible with Trove which
# is DBaaS for OpenStack.
# Using K2HR3 as backend and incorporating it into Trove to provide
# DBaaS functionality. K2HDKC, K2HR3, CHMPX and K2HASH are components
# provided as AntPickax.
#
# For the full copyright and license information, please view
# the license file that was distributed with this source code.
#
# AUTHOR:
# CREATE:
# REVISION:
#

diff --git a/trove/guestagent/utils/docker.py b/trove/guestagent/utils/docker.py
index 25fb490b..a68f6281 100644
--- a/trove/guestagent/utils/docker.py
+++ b/trove/guestagent/utils/docker.py
@@ -119,7 +119,7 @@ def _create_container_with_low_level_api(image: str, param: dict) -> None:
 def start_container(client, image, name="database",
                     restart_policy="unless-stopped",
                     volumes={}, ports={}, user="", network_mode="host",
-                    environment={}, command=""):
+                    environment={}, command="", sysctls={}):
     """Start a docker container.
 
     :param client: docker client obj.
@@ -134,6 +134,7 @@ def start_container(client, image, name="database",
     :param network_mode: One of bridge, none, host
     :param environment: Environment variables
     :param command:
+    :param sysctls: kernel parameters to set in the container.
     :return:
     """
     try:
@@ -148,7 +149,7 @@ def start_container(client, image, name="database",
         f"Creating docker container, image: {image}, "
         f"volumes: {volumes}, ports: {ports}, user: {user}, "
         f"network_mode: {network_mode}, environment: {environment}, "
-        f"command: {command}")
+        f"command: {command}, sysctls: {sysctls}")
     kwargs = dict(name=name,
                   restart_policy={"Name": restart_policy},
                   privileged=False,
@@ -157,7 +158,8 @@ def start_container(client, image, name="database",
                   ports=ports,
                   user=user,
                   environment=environment,
-                  command=command)
+                  command=command,
+                  sysctls=sysctls)
     if network_mode == constants.DOCKER_HOST_NIC_MODE:
         create_network(client, constants.DOCKER_NETWORK_NAME)
         kwargs["network"] = constants.DOCKER_NETWORK_NAME
@@ -174,7 +176,7 @@ def _decode_output(output):
 
 
 def run_container(client, image, name, network_mode="host", volumes={},
-                  command="", user=""):
+                  command="", user="", environment={}):
     """Run command in a container and return the string output list.
 
     :returns output: The log output.
@@ -191,7 +193,8 @@ def run_container(client, image, name, network_mode="host", volumes={},
         LOG.info(
             f'Running container {name}, image: {image}, '
             f'network_mode: {network_mode}, volumes: {volumes}, '
-            f'command: {command}')
+            f'command: {command}, user: {user}, env:${environment}')
+        # https://docker-py.readthedocs.io/en/stable/containers.html#docker.models.containers.ContainerCollection.run
         output = client.containers.run(
             image,
             name=name,
@@ -200,13 +203,20 @@ def run_container(client, image, name, network_mode="host", volumes={},
             remove=False,
             command=command,
             user=user,
+            environment=environment,
         )
+        decode_output = _decode_output(output)
+        LOG.info(f'container {name}, decode_output: {decode_output}')
+        container = client.containers.get(name)
+        container.stop(timeout=CONF.state_change_wait_time)
+        return decode_output, True
+    except docker.errors.APIError as err:
+        output = err.container.logs()
+        return _decode_output(output), False
     except docker.errors.ContainerError as err:
         output = err.container.logs()
         return _decode_output(output), False
 
-    return _decode_output(output), True
-
 
 def get_container_status(client, name="database"):
     try:

#
# Local variables:
# tab-width: 4
# c-basic-offset: 4
# End:
# vim600: noexpandtab sw=4 ts=4 fdm=marker
# vim<600: noexpandtab sw=4 ts=4
#
